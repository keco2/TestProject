//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TaskMgmt.UI.ServiceRef {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceRef.ITaskService")]
    public interface ITaskService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/GetTasks", ReplyAction="http://tempuri.org/ITaskService/GetTasksResponse")]
        TaskMgmt.Model.Task[] GetTasks();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/GetTasks", ReplyAction="http://tempuri.org/ITaskService/GetTasksResponse")]
        System.Threading.Tasks.Task<TaskMgmt.Model.Task[]> GetTasksAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/GetTaskById", ReplyAction="http://tempuri.org/ITaskService/GetTaskByIdResponse")]
        TaskMgmt.Model.Task GetTaskById(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/GetTaskById", ReplyAction="http://tempuri.org/ITaskService/GetTaskByIdResponse")]
        System.Threading.Tasks.Task<TaskMgmt.Model.Task> GetTaskByIdAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/AddTask", ReplyAction="http://tempuri.org/ITaskService/AddTaskResponse")]
        void AddTask(TaskMgmt.Model.Task task);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/AddTask", ReplyAction="http://tempuri.org/ITaskService/AddTaskResponse")]
        System.Threading.Tasks.Task AddTaskAsync(TaskMgmt.Model.Task task);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/UpdateTask", ReplyAction="http://tempuri.org/ITaskService/UpdateTaskResponse")]
        void UpdateTask(string id, TaskMgmt.Model.Task task);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/UpdateTask", ReplyAction="http://tempuri.org/ITaskService/UpdateTaskResponse")]
        System.Threading.Tasks.Task UpdateTaskAsync(string id, TaskMgmt.Model.Task task);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/DeleteTask", ReplyAction="http://tempuri.org/ITaskService/DeleteTaskResponse")]
        void DeleteTask(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/DeleteTask", ReplyAction="http://tempuri.org/ITaskService/DeleteTaskResponse")]
        System.Threading.Tasks.Task DeleteTaskAsync(string id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITaskServiceChannel : TaskMgmt.UI.ServiceRef.ITaskService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TaskServiceClient : System.ServiceModel.ClientBase<TaskMgmt.UI.ServiceRef.ITaskService>, TaskMgmt.UI.ServiceRef.ITaskService {
        
        public TaskServiceClient() {
        }
        
        public TaskServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TaskServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TaskServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TaskServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public TaskMgmt.Model.Task[] GetTasks() {
            return base.Channel.GetTasks();
        }
        
        public System.Threading.Tasks.Task<TaskMgmt.Model.Task[]> GetTasksAsync() {
            return base.Channel.GetTasksAsync();
        }
        
        public TaskMgmt.Model.Task GetTaskById(string id) {
            return base.Channel.GetTaskById(id);
        }
        
        public System.Threading.Tasks.Task<TaskMgmt.Model.Task> GetTaskByIdAsync(string id) {
            return base.Channel.GetTaskByIdAsync(id);
        }
        
        public void AddTask(TaskMgmt.Model.Task task) {
            base.Channel.AddTask(task);
        }
        
        public System.Threading.Tasks.Task AddTaskAsync(TaskMgmt.Model.Task task) {
            return base.Channel.AddTaskAsync(task);
        }
        
        public void UpdateTask(string id, TaskMgmt.Model.Task task) {
            base.Channel.UpdateTask(id, task);
        }
        
        public System.Threading.Tasks.Task UpdateTaskAsync(string id, TaskMgmt.Model.Task task) {
            return base.Channel.UpdateTaskAsync(id, task);
        }
        
        public void DeleteTask(string id) {
            base.Channel.DeleteTask(id);
        }
        
        public System.Threading.Tasks.Task DeleteTaskAsync(string id) {
            return base.Channel.DeleteTaskAsync(id);
        }
    }
}
