//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TaskMgmt.UI.MaterialServiceRef {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MaterialServiceRef.IMaterialService")]
    public interface IMaterialService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialService/GetMaterials", ReplyAction="http://tempuri.org/IMaterialService/GetMaterialsResponse")]
        TaskMgmt.Model.Material[] GetMaterials();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialService/GetMaterials", ReplyAction="http://tempuri.org/IMaterialService/GetMaterialsResponse")]
        System.Threading.Tasks.Task<TaskMgmt.Model.Material[]> GetMaterialsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialService/GetMaterialById", ReplyAction="http://tempuri.org/IMaterialService/GetMaterialByIdResponse")]
        TaskMgmt.Model.Material GetMaterialById(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialService/GetMaterialById", ReplyAction="http://tempuri.org/IMaterialService/GetMaterialByIdResponse")]
        System.Threading.Tasks.Task<TaskMgmt.Model.Material> GetMaterialByIdAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialService/AddMaterial", ReplyAction="http://tempuri.org/IMaterialService/AddMaterialResponse")]
        void AddMaterial(TaskMgmt.Model.Material material);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialService/AddMaterial", ReplyAction="http://tempuri.org/IMaterialService/AddMaterialResponse")]
        System.Threading.Tasks.Task AddMaterialAsync(TaskMgmt.Model.Material material);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialService/UpdateMaterial", ReplyAction="http://tempuri.org/IMaterialService/UpdateMaterialResponse")]
        void UpdateMaterial(string id, TaskMgmt.Model.Material material);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialService/UpdateMaterial", ReplyAction="http://tempuri.org/IMaterialService/UpdateMaterialResponse")]
        System.Threading.Tasks.Task UpdateMaterialAsync(string id, TaskMgmt.Model.Material material);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialService/DeleteMaterial", ReplyAction="http://tempuri.org/IMaterialService/DeleteMaterialResponse")]
        void DeleteMaterial(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMaterialService/DeleteMaterial", ReplyAction="http://tempuri.org/IMaterialService/DeleteMaterialResponse")]
        System.Threading.Tasks.Task DeleteMaterialAsync(string id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMaterialServiceChannel : TaskMgmt.UI.MaterialServiceRef.IMaterialService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MaterialServiceClient : System.ServiceModel.ClientBase<TaskMgmt.UI.MaterialServiceRef.IMaterialService>, TaskMgmt.UI.MaterialServiceRef.IMaterialService {
        
        public MaterialServiceClient() {
        }
        
        public MaterialServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MaterialServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MaterialServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MaterialServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public TaskMgmt.Model.Material[] GetMaterials() {
            return base.Channel.GetMaterials();
        }
        
        public System.Threading.Tasks.Task<TaskMgmt.Model.Material[]> GetMaterialsAsync() {
            return base.Channel.GetMaterialsAsync();
        }
        
        public TaskMgmt.Model.Material GetMaterialById(string id) {
            return base.Channel.GetMaterialById(id);
        }
        
        public System.Threading.Tasks.Task<TaskMgmt.Model.Material> GetMaterialByIdAsync(string id) {
            return base.Channel.GetMaterialByIdAsync(id);
        }
        
        public void AddMaterial(TaskMgmt.Model.Material material) {
            base.Channel.AddMaterial(material);
        }
        
        public System.Threading.Tasks.Task AddMaterialAsync(TaskMgmt.Model.Material material) {
            return base.Channel.AddMaterialAsync(material);
        }
        
        public void UpdateMaterial(string id, TaskMgmt.Model.Material material) {
            base.Channel.UpdateMaterial(id, material);
        }
        
        public System.Threading.Tasks.Task UpdateMaterialAsync(string id, TaskMgmt.Model.Material material) {
            return base.Channel.UpdateMaterialAsync(id, material);
        }
        
        public void DeleteMaterial(string id) {
            base.Channel.DeleteMaterial(id);
        }
        
        public System.Threading.Tasks.Task DeleteMaterialAsync(string id) {
            return base.Channel.DeleteMaterialAsync(id);
        }
    }
}
